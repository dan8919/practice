
https://medium.com/webeveloper/%EC%9E%90%EB%B0%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4-6eecbe5d6350

Abstract Methods and Classes
https://dohe2014.tistory.com/entry/Abstract-Methods-and-Classes


interface:

static final, abstract method 집합
생성자 가질 수 없으며 객체화 불가능
선언된 상수와 추상 메서드는 public static final과 public abstract를 생략해도 됨
=>컴파일 시에 자도으로 생성해주기 때문에.

'be able to'  "~할 수 있는"
인터페이스 네이밍 규칙->xxxable
구현체 네이밍 규칙->xxxImple

8부터 default method 지원
=>기존 인터페이스 기능을 확장하며
구현체에 공통으로 들어갈 기능을 디폴트 메서드 내부에 작성하여 반복되는 코드의 작성을 줄여줍니다.
(default 키워드 반듯이 추가)

Interface printable 참고
=======================================================================================

abstract class:

추상 클래스는 필드,생성자,추상메서드를 가질 수 있슴.
생성자를 가지기 때문에 객체화 가능. 필드도 가질 수 있슴

abstract class 추상 메서드를 하나라도 가져야 할까?
No. 다만 추상 메서드 하나라도 있는 클래스면 abstract class어야 한다.

extends을 통해서만 사용이 가능.
하위 클래스의 생성자에서 super()변수를 사용해서 추상 클래스의 생성자를 부르고 초기화 시킵니다.

'is a kind of' "~의 한 종류"
=>예를들어 뽀로로 is a kind of 펭귄 이라하면 뽀로로는 펭귄의 한 종류이다 라는 의미를 가지고 있습니다.
여기서 뽀로로가 하위 클래스가되며 펭귄이 상위 클래스가 됩니다.


===========================================================================================
Polymorphism 다형성
=>여러 객체에게 동일한 명령을 내렸을 때 서로 다르게 반응하는 현상을 의미함.

인터페이스와 추상클래스를 이해하기 위해서는 다형성이라는 개념을 익혀야합니다.


다형성을 구현하는 방법 크게 4가지:
1.인터페이스(interface)
2.추상클래스(abstract)
3.메서드 오버라이딩
4.메서드 오버로딩






























